/*
to make things simpler, generics can only take one argument
must have either separated or erased keyword before 'identifier
*/
struct Vector@<separated 'a>{
	'a* data;
	u32 size;
	u32 capacity;
}

/*
inside of a generic erased function, the type var cannot be passed to anything
that would cause separation.
*/
struct A@<separated 'a>{
	'a x;
}
void f@<separated 'f>(){
	return;
}
void g@<erased 'g>{
	//allowed, because all the necessary information is present
	struct A@<i32> x;

	//allowed, because all the necessary information is present
	f@<bool>();

	//not allowed, because g does not know what instantiation of A to use here
	struct A@<'g> y;

	//not allowed, because g does not know what instantiation of f to use here
	f@<'g[4]*>();
}

/*
this example is invalid because it refers to a separated type that depends on an erased type var
Vector is marked as a separated generic
inside vectorPush, 'a is marked as erased
an erased type var cannot be passed to a separated generic
*/
void vectorPush@<erased 'a>(Vector<'a> *vec, 'a elem){
	vec.data[vec.size+1] = elem;
	vec.size = vec.size + 1;
}
