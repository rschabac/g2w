small example of rewriting: replace 'auto' type with actual type, if actual type is succinct
AST-based macros: #expand tells the compiler to change the source file
	maybe also add #expand_recursively to expand all nested macros
	will need to keep all info about source file through lexing and parsing
polymorphism can be done with type erasure OR separately optimized
	template expansion (separately optimized) generates additional file with instantiations
	type erasure will need to prevent doing type-specific things with values
		can only be used like a void*
	hybrid mode: type-erased for pointer types, specialized for non-pointer types

maybe:
	function pointers and function types
	Sum types
	unity builds are default, whole directory compilation

interpreter may be helpful in testing, to compare compiler against

How to handle errno?
on my laptop, errno is a c macro that expands to (*__errno_location())
errno.h includes a declaration of the following function (with gcc attributes):
extern int *__errno_location (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
one way to handle this would be to add this function to the func context (along with all the
other "std lib" functions), and call it manually to get or set errno
For completeness, I would need to make sure no user-defined names ever get mangled to __errno_location
Alternatively, I could add a function in runtime.c that will return a pointer to errno. This would
be more portable to systems where errno is just a global int, not a macro to a function call

doing type-specific things in generic functions requires function pointers, so that
dictionary passing can be done manually
http://okmij.org/ftp/Computation/typeclass.html
