/*0
10
11
12
13
14
5
6
*/

extern void* malloc(u64);
extern void free(void*);

struct vec@<separated 'T>{
	'T* data;
	u64 size;
	u64 capacity;
}

void init_vec_i32(struct vec@<i32>* this, u64 capacity) {
	if capacity != cast(u64, 0) {
		this.data = cast(i32*, malloc(capacity * sizeof(i32)));
	} else {
		this.data = cast(i32*, null);
	}
	this.size = cast(u64, 0);
	this.capacity = capacity;
}

void push_i32(struct vec@<i32>* this, i32 e){
	if this.capacity == cast(u64, 0) {
		if this.data != cast(i32*, null) {
			printf("error, data is not null when capacity is 0%c", 10);
		}
		this.data = cast(i32*, malloc(cast(u64, 4) * sizeof(i32)));
		this.data[0] = e;
		this.capacity = cast(u64, 4);
		this.size = cast(u64, 1);
		return;
	}
	if this.size == this.capacity {
		//reallocate
		i32* new_alloc;
		new_alloc = cast(i32*, malloc(cast(u64, 2) * this.capacity));
		u64 temp;
		temp = cast(u64, 0);
		while temp < this.size {
			new_alloc[temp] = this.data[temp];
		}

		free(cast(void*, this.data));
		this.data = new_alloc;
		this.size = this.size + cast(u64, 1);
		this.capacity = cast(u64, 2) * this.capacity;
		return;
	}
	this.data[this.size] = e;
	this.size = this.size + cast(u64, 1);
}

i32 main(){
	struct vec@<i32> v;
	init_vec_i32(&v, cast(u64, 5));
	push_i32(&v, cast(i32, 10));
	push_i32(&v, cast(i32, 11));
	push_i32(&v, cast(i32, 12));
	push_i32(&v, cast(i32, 13));
	push_i32(&v, cast(i32, 14));

	u64 index;
	index = cast(u64, 0);
	while index < v.size {
		printf("%ld%c", v.data[index], 10);
		index = index + cast(u64, 1);
	}

	struct vec@<i32>[2] pair;
	init_vec_i32(&pair[0], cast(u64, 0));
	init_vec_i32(&pair[1], cast(u64, 0));
	push_i32(&pair[0], cast(i32, 5));
	push_i32(&pair[1], cast(i32, 6));
	printf("%ld%c", pair[0].data[0], 10);
	printf("%ld%c", pair[1].data[0], 10);

	return cast(i32, 0);
}
